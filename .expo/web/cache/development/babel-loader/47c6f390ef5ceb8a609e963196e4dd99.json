{"ast":null,"code":"import { createStore, compose, applyMiddleware } from 'redux';\nimport reduxImmutableStateInvariant from 'redux-immutable-state-invariant';\nimport createSagaMiddleware from 'redux-saga';\nimport { createBrowserHistory } from 'history';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport createRootReducer from \"../reducers\";\nimport rootSaga from \"../sagas\";\nexport var history = createBrowserHistory();\nvar connectRouterHistory = connectRouter(history);\nvar sagaMiddleware = createSagaMiddleware();\n\nfunction configureStoreProd(initialState) {\n  var reactRouterMiddleware = routerMiddleware(history);\n  var middlewares = [sagaMiddleware, reactRouterMiddleware];\n  var store = createStore(createRootReducer(history), initialState, compose(applyMiddleware.apply(void 0, middlewares)));\n  sagaMiddleware.run(rootSaga);\n  return store;\n}\n\nfunction configureStoreDev(initialState) {\n  var reactRouterMiddleware = routerMiddleware(history);\n  var middlewares = [reduxImmutableStateInvariant(), sagaMiddleware, reactRouterMiddleware];\n  var composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  var store = createStore(createRootReducer(history), initialState, composeEnhancers(applyMiddleware.apply(void 0, middlewares)));\n\n  if (module.hot) {\n    module.hot.accept('../reducers', function () {\n      var nextRootReducer = require(\"../reducers\").default;\n\n      store.replaceReducer(connectRouterHistory(nextRootReducer));\n    });\n  }\n\n  sagaMiddleware.run(rootSaga);\n  return store;\n}\n\nvar configureStore = process.env.NODE_ENV === 'production' ? configureStoreProd : configureStoreDev;\nexport default configureStore;","map":{"version":3,"sources":["/Users/guiconti/github/react-native-boilerplate/src/store/index.js"],"names":["createStore","compose","applyMiddleware","reduxImmutableStateInvariant","createSagaMiddleware","createBrowserHistory","connectRouter","routerMiddleware","createRootReducer","rootSaga","history","connectRouterHistory","sagaMiddleware","configureStoreProd","initialState","reactRouterMiddleware","middlewares","store","run","configureStoreDev","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","module","hot","accept","nextRootReducer","require","default","replaceReducer","configureStore","process","env","NODE_ENV"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,OAArB,EAA8BC,eAA9B,QAAoD,OAApD;AACA,OAAOC,4BAAP,MAAyC,iCAAzC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,oBAAT,QAAqC,SAArC;AACA,SAASC,aAAT,EAAwBC,gBAAxB,QAAgD,wBAAhD;AACA,OAAOC,iBAAP;AACA,OAAOC,QAAP;AAEA,OAAO,IAAMC,OAAO,GAAGL,oBAAoB,EAApC;AACP,IAAMM,oBAAoB,GAAGL,aAAa,CAACI,OAAD,CAA1C;AACA,IAAME,cAAc,GAAGR,oBAAoB,EAA3C;;AAEA,SAASS,kBAAT,CAA4BC,YAA5B,EAA0C;AACxC,MAAMC,qBAAqB,GAAGR,gBAAgB,CAACG,OAAD,CAA9C;AACA,MAAMM,WAAW,GAAG,CAClBJ,cADkB,EAElBG,qBAFkB,CAApB;AAKA,MAAME,KAAK,GAAGjB,WAAW,CACvBQ,iBAAiB,CAACE,OAAD,CADM,EAEvBI,YAFuB,EAGvBb,OAAO,CAACC,eAAe,MAAf,SAAmBc,WAAnB,CAAD,CAHgB,CAAzB;AAMAJ,EAAAA,cAAc,CAACM,GAAf,CAAmBT,QAAnB;AAEA,SAAOQ,KAAP;AACD;;AAED,SAASE,iBAAT,CAA2BL,YAA3B,EAAyC;AACvC,MAAMC,qBAAqB,GAAGR,gBAAgB,CAACG,OAAD,CAA9C;AACA,MAAMM,WAAW,GAAG,CAClBb,4BAA4B,EADV,EAElBS,cAFkB,EAGlBG,qBAHkB,CAApB;AAMA,MAAMK,gBAAgB,GAAGC,MAAM,CAACC,oCAAP,IAA+CrB,OAAxE;AACA,MAAMgB,KAAK,GAAGjB,WAAW,CACvBQ,iBAAiB,CAACE,OAAD,CADM,EAEvBI,YAFuB,EAGvBM,gBAAgB,CAAClB,eAAe,MAAf,SAAmBc,WAAnB,CAAD,CAHO,CAAzB;;AAMA,MAAIO,MAAM,CAACC,GAAX,EAAgB;AACdD,IAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,aAAlB,EAAiC,YAAM;AACrC,UAAMC,eAAe,GAAGC,OAAO,eAAP,CAAuBC,OAA/C;;AACAX,MAAAA,KAAK,CAACY,cAAN,CAAqBlB,oBAAoB,CAACe,eAAD,CAAzC;AACD,KAHD;AAID;;AAEDd,EAAAA,cAAc,CAACM,GAAf,CAAmBT,QAAnB;AAEA,SAAOQ,KAAP;AACD;;AAED,IAAMa,cAAc,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCpB,kBAAxC,GAA6DM,iBAApF;AAEA,eAAeW,cAAf","sourcesContent":["import {createStore, compose, applyMiddleware} from 'redux';\nimport reduxImmutableStateInvariant from 'redux-immutable-state-invariant';\nimport createSagaMiddleware from 'redux-saga';\nimport { createBrowserHistory } from 'history';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport createRootReducer from '../reducers';\nimport rootSaga from '../sagas';\n\nexport const history = createBrowserHistory();\nconst connectRouterHistory = connectRouter(history);\nconst sagaMiddleware = createSagaMiddleware()\n\nfunction configureStoreProd(initialState) {\n  const reactRouterMiddleware = routerMiddleware(history);\n  const middlewares = [\n    sagaMiddleware,\n    reactRouterMiddleware,\n  ];\n\n  const store = createStore(\n    createRootReducer(history),\n    initialState,\n    compose(applyMiddleware(...middlewares))\n  );\n\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n}\n\nfunction configureStoreDev(initialState) {\n  const reactRouterMiddleware = routerMiddleware(history);\n  const middlewares = [\n    reduxImmutableStateInvariant(),\n    sagaMiddleware,\n    reactRouterMiddleware,\n  ];\n\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  const store = createStore(\n    createRootReducer(history),\n    initialState,\n    composeEnhancers(applyMiddleware(...middlewares))\n  );\n\n  if (module.hot) {\n    module.hot.accept('../reducers', () => {\n      const nextRootReducer = require('../reducers').default; // eslint-disable-line global-require\n      store.replaceReducer(connectRouterHistory(nextRootReducer));\n    });\n  }\n\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n}\n\nconst configureStore = process.env.NODE_ENV === 'production' ? configureStoreProd : configureStoreDev;\n\nexport default configureStore;\n"]},"metadata":{},"sourceType":"module"}