{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = _regeneratorRuntime.mark(fetchFunds),\n    _marked2 = _regeneratorRuntime.mark(watchFetchFunds),\n    _marked3 = _regeneratorRuntime.mark(watch);\n\nimport { put, call, take, fork, all } from 'redux-saga/effects';\nimport { WALLET_FETCH_FUNDS } from \"../types/wallet\";\nimport { retrieveFunds } from \"../apis/walletApis\";\nimport { updateFunds } from \"../actions/walletActions\";\nexport function fetchFunds(payload) {\n  var result;\n  return _regeneratorRuntime.wrap(function fetchFunds$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return call(retrieveFunds, payload);\n\n        case 2:\n          result = _context.sent;\n          _context.next = 5;\n          return put(updateFunds(result));\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction watchFetchFunds() {\n  var _yield$take, payload;\n\n  return _regeneratorRuntime.wrap(function watchFetchFunds$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!true) {\n            _context2.next = 9;\n            break;\n          }\n\n          _context2.next = 3;\n          return take(WALLET_FETCH_FUNDS);\n\n        case 3:\n          _yield$take = _context2.sent;\n          payload = _yield$take.payload;\n          _context2.next = 7;\n          return fork(fetchFunds, payload);\n\n        case 7:\n          _context2.next = 0;\n          break;\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function watch() {\n  return _regeneratorRuntime.wrap(function watch$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchFetchFunds)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/guiconti/github/react-native-boilerplate/src/sagas/walletSaga.js"],"names":["fetchFunds","watchFetchFunds","watch","put","call","take","fork","all","WALLET_FETCH_FUNDS","retrieveFunds","updateFunds","payload","result"],"mappings":";;uCAKiBA,U;wCAKPC,e;wCAOeC,K;;AAjBzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,IAA1B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SAASC,kBAAT;AACA,SAASC,aAAT;AACA,SAASC,WAAT;AAEA,OAAO,SAAUV,UAAV,CAAqBW,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACU,iBAAMP,IAAI,CAACK,aAAD,EAAgBE,OAAhB,CAAV;;AADV;AACCC,UAAAA,MADD;AAAA;AAEL,iBAAMT,GAAG,CAACO,WAAW,CAACE,MAAD,CAAZ,CAAT;;AAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKP,SAAUX,eAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,eACS,IADT;AAAA;AAAA;AAAA;;AAAA;AAEwB,iBAAMI,IAAI,CAACG,kBAAD,CAAV;;AAFxB;AAAA;AAEYG,UAAAA,OAFZ,eAEYA,OAFZ;AAAA;AAGI,iBAAML,IAAI,CAACN,UAAD,EAAaW,OAAb,CAAV;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,eAAe,SAAUT,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMK,GAAG,CAAC,CACRD,IAAI,CAACL,eAAD,CADI,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { put, call, take, fork, all } from 'redux-saga/effects';\nimport { WALLET_FETCH_FUNDS } from '../types/wallet';\nimport { retrieveFunds } from '../apis/walletApis';\nimport { updateFunds } from '../actions/walletActions';\n\nexport function* fetchFunds(payload) {\n  const result = yield call(retrieveFunds, payload);\n  yield put(updateFunds(result));\n}\n\nfunction* watchFetchFunds() {\n  while (true) {\n    const { payload } = yield take(WALLET_FETCH_FUNDS);\n    yield fork(fetchFunds, payload);\n  }\n}\n\nexport default function* watch() {\n  yield all([\n    fork(watchFetchFunds)\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}