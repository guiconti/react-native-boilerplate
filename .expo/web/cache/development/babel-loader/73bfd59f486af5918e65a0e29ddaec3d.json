{"ast":null,"code":"import { WALLET_FUNDS } from \"../types/wallet\";\nimport objectAssign from 'object-assign';\nimport initialState from \"./initialState\";\nexport default function walletReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState.wallet;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case WALLET_FUNDS:\n      return objectAssign({}, state, {\n        funds: action.payload\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/guiconti/github/react-native-boilerplate/src/reducers/walletReducer.js"],"names":["WALLET_FUNDS","objectAssign","initialState","walletReducer","state","wallet","action","type","funds","payload"],"mappings":"AAAA,SAASA,YAAT;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAOC,YAAP;AAOA,eAAe,SAASC,aAAT,GAA4D;AAAA,MAArCC,KAAqC,uEAA7BF,YAAY,CAACG,MAAgB;AAAA,MAARC,MAAQ;;AACzE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,YAAL;AACE,aAAOC,YAAY,CAAC,EAAD,EAAKG,KAAL,EAAY;AAAEI,QAAAA,KAAK,EAAEF,MAAM,CAACG;AAAhB,OAAZ,CAAnB;;AAEF;AACE,aAAOL,KAAP;AALJ;AAOD","sourcesContent":["import { WALLET_FUNDS } from '../types/wallet';\nimport objectAssign from 'object-assign';\nimport initialState from './initialState';\n\n// IMPORTANT: Note that with Redux, state should NEVER be changed.\n// State is considered immutable. Instead,\n// create a copy of the state passed and set new values on the copy.\n// Note that I'm using Object.assign to create a copy of current state\n// and update values on the copy.\nexport default function walletReducer(state = initialState.wallet, action) {\n  switch (action.type) {\n    case WALLET_FUNDS:\n      return objectAssign({}, state, { funds: action.payload });\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}